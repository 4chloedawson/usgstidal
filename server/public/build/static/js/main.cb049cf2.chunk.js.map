{"version":3,"sources":["Map/Layers/ArrowLayer.js","Map/Layers/WindLayer.js","Map/Layers/WaveLayer.js","Map/Layers/SiteIconLayer.js","Services/ManifestService.js","Graph/Graph.js","Services/MapService.js","Map/Layers/CountourLayer.js","Map/Map.js","Controls/Controls.js","Views/MapView/MapView.js","Views/AboutView/AboutView.js","Graph/Water.js","Graph/WaterGraph.js","Graph/Wind.js","Graph/WindGraph.js","Router/Navagation.js","Router/Router.js","App.js","serviceWorker.js","index.js"],"names":["getRotatedLine","source","target","negative","oy","ox","theta","cs","Math","cos","sn","sin","px","py","ArrowLayer","props","LineLayer","Object","objectSpread","id","getSourcePosition","x","getTargetPosition","colorRange","WaveDirection","data","currentTime","getWidth","cart_theta","PI","hs_x","hs_y","getColor","parameters","depthTest","updateTriggers","WaveLayer","GridCellLayer","cellSize","extruded","getPosition","ftVal","ft","NameLayer","zoomToSite","TextLayer","pickable","d","NEpoint","SWpoint","getText","siteDisplayName","getSize","getAngle","getTextAnchor","getAlignmentBaseline","onClick","SiteIconLayers","onSiteClick","spatialDomainsSites","PolygonLayer","stroked","filled","wireframe","lineWidthMinPixels","getFillColor","getLineColor","getLineWidth","pickingRadius","getPolygon","ManifestService","_Container","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pointLocationsSites","fetched","sites","currentSiteData","loadingCurrentSite","requestData","inherits","createClass","key","value","_requestData","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","axios","get","maxContentLength","sent","setState","SpatialDomains","PointLocations","stop","apply","arguments","_requestSiteData","_callee2","siteID","type","_context2","_x","_x2","Container","Graph","_ref","y","onMouseLeave","react_default","createElement","style","left","top","className","MapService","_getPrototypeOf2","_len","length","args","Array","_key","concat","time","layers","wind","wave","pressure","navMode","layer","newState","console","log","MAPBOX_TOKEN","process","MapComponent","viewState","longitude","latitude","zoom","minZoom","maxZoom","pitch","bearing","displayingGraph","displayGraph","site","onObsHover","info","closeGraph","lngLat","transitionDuration","transitionInterpolator","FlyToInterpolator","onViewStateChange","getLayers","manifest","map","toggleNavMode","requestSiteData","object","Graph_Graph_Graph","dist_esm","initialViewState","controller","esm","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","Component","Map","unstated_es","to","Map_MapComponent","Controls","_Component","toggleLayer","layerName","defineProperty","getDateLabel","h","date","moment","add","format","_this2","mapService","build","horizontal","lib_default","ticking","vertical","js_default","maxValue","minValue","formatLabel","onChange","adjustTime","MapView","Map_Map","Controls_Controls_Controls","AboutView","buildGraph","_buildGraph","abrupt","Promise","resolve","reject","graphs","doParsePO","allResults","status","doCallback","i","spot","undefined","str","justdate","justtime","datepart","timepart","fulldt","timeP","tidePreds","ntr","twlPreds","push","substring","Date","parseFloat","round","toFixed","doGraphs","timeO","twlObs","twlChart","size","height","xs","Predicted Total Water Level","Predicted Tide Level","xFormat","columns","colors","point","show","legend","position","axis","label","text","tick","count","culling","max","tooltip","title","ratio","react_c3js_default","doPGraph","Observed Total Water Level","doPOGraph","ntrChart","Non-Tidal Residual","grid","lines","doNTRGraph","urlP","urlO","callBack","forEach","url","http","XMLHttpRequest","open","send","urlExists","tempresultsp","tempresultso","Papa","parse","download","skipEmptyLines","complete","results","WaterGraph","loaded","_componentWillMount","Water","graph","scale","Graph_Wind_buildGraph","dirP","speedP","tempSpeedPinmph","speedPinmph","dirO","gusts","speedO","tempSpeedOinmph","speedOinmph","speedChart","Predicted Speed","Observed Speed","Gusts","directionChart","Predicted Direction","Observed Direction","doDirectionGraph","WindGraph","Wind","NavagationComponet","_React$Component","NavLink","activeClassName","exact","React","Navagation","withRouter","Navagation_NavagationComponet","AppRouter","BrowserRouter","Navagation_Navagation","Route","path","component","App","inject","Router_AppRouter","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb049cf2.chunk.js","sourcesContent":["import {LineLayer} from 'deck.gl';\n\nconst scaler = 0.8;\n\nconst getRotatedLine = (source, target, negative)=>{\n\n    const oy = (target[0] - source[0]) *scaler;\n    const ox = (target[1] - source[1]) *scaler;\n\n    let theta = .1;\n\n    if (negative){\n        theta = theta * -1;\n    }\n\n    let cs = Math.cos(theta);\n    let sn = Math.sin(theta);\n\n    let px = ox * cs - oy * sn; \n    let py = ox * sn + oy * cs;\n    \n\n    return [source[0] + py , source[1] + px]\n}\n\n\nconst ArrowLayer = (props) =>{\n    const outLayers = [\n        new LineLayer({\n            ...props,\n          id: 'base ' + props.id,        \n        }),\n        new LineLayer({\n            ...props,\n            getSourcePosition: x=> {\n                if (props.getSourcePosition(x) == null) {\n                    return;\n                }\n                return getRotatedLine(props.getSourcePosition(x), props.getTargetPosition(x))\n            },\n          id: 'rightwing ' + props.id,        \n        }),\n        new LineLayer({\n            ...props,\n            getSourcePosition: x=> {\n                if (props.getSourcePosition(x) == null) {\n                    return;\n                }\n                return getRotatedLine(props.getSourcePosition(x), props.getTargetPosition(x), true)\n            },            \n            id: 'leftwing ' + props.id,        \n        }),\n    ]\n    return outLayers\n}\n\nexport default ArrowLayer;","import data from './wind';\nimport ArrowLayer from './ArrowLayer';\nconst windScale = .015;\n\nconst colorRange = [\n  [0x09, 0x40, 0x74],\n  [0x3C, 0x69, 0x97],\n  [0x5A, 0xDB, 0xFF],\n  [0xFF, 0xDD, 0x4A],\n  [0xFE, 0x90, 0x00]\n];\n\n\nfunction getColor(min, max, value) {\n    const step = (max - min) / colorRange.length;\n    const colorNum = Math.round(value / step);\n    return colorRange[colorNum];\n}\n\n\nexport const WindLayer = (currentTime, data)=>{\n  return ArrowLayer({\n            id: 'wind',\n            data: data,\n            getWidth: 3,\n            getSourcePosition: x => [x.lon, x.lat],\n            getTargetPosition: x => [x.lon + (x.u[currentTime] * windScale), x.lat + (x.v[currentTime] * windScale)],\n            getColor: x => getColor(0, 25, Math.abs(x.v[currentTime]) + Math.abs(x.u[currentTime])),\n            updateTriggers: {              \n              getTargetPosition: currentTime,\n              getSourcePosition: currentTime,\n              getColor: currentTime,\n            },\n        });\n}\n","import { GridCellLayer } from 'deck.gl';\nimport ArrowLayer from './ArrowLayer';\n\n/*\nTODO #2 Return a new Layer using your data.\nFor the first pass lets use a hexagon layer. \nSee this example https://github.com/uber/deck.gl/tree/6.3-release/examples/website/3d-heatmap\n\nhs - significant wave height, abbreviated as Hsig or H_sig most often. Units are meters. 1\ntm - Mean wave period, abbrev is Tm typically. units seconds 1\ndp - Mean wave direction [deg], you can use to create arrows 1\nlat, lon 1\nlat_limits,lon_limits - Extent of domain\nlat_boundary, lon_boundary - More detailed boundary \n\nYou can also reference the WindLayer.js to see a working example.\n*/\nconst colorRange = [\n  [255 * 0.0078, 255 * 0.0745, 255 * 0.6706, 255],\n  [0,            0,            255 * 1.0000, 255],\n  [0,            255 * 0.5349, 255 * 1.0000, 255],\n  [0,            255 * 1.0000, 255 * 0.9070, 255],\n  [0,            255 * 1.0000, 255 * 0.1628, 255],\n  [255 * 1.0000, 255 * 1.0000, 0,            255],\n  [255 * 1.0000, 255 * 0.4419, 0,            255],\n  [255 * 1.0000, 0,            255 * 0.1163, 255],\n  [255 * 0.6706, 0,            0,            255],\n  [255 * 1.0000, 0,            255 * 0.8605, 255],\n  [255 * 0.5581, 0,            255 * 0.5581, 255],\n  [255 * 0.0233, 0,            255 * 0.0233, 255],\n]\n\nfunction getColorValue(ft, colorRange) {\n  if (ft > 0 && ft < 0.5){\n    return colorRange[0]\n  }\n  else if (ft > 0.5 && ft < 1.0){\n    return colorRange[1]\n  }\n  else if (ft > 1.0 && ft < 1.5){\n    return colorRange[2]\n  }\n  else if (ft > 1.5 && ft < 2.0){\n    return colorRange[3]\n  }\n  else if (ft > 2.0 && ft < 2.5){\n    return colorRange[4]\n  }\n  else if (ft > 2.5 && ft < 3.0){\n    return colorRange[5]\n  }\n  else if (ft > 3.0 && ft < 3.5){\n    return colorRange[6]   \n  }\n  else if (ft > 3.5 && ft < 4.0){\n    return colorRange[7]\n  }\n  else if (ft > 4.0 && ft < 4.5){\n    return colorRange[8]\n  }\n  else if (ft > 4.5 && ft < 5.0){\n    return colorRange[9]\n  }\n  else if (ft > 5.0 && ft < 5.5){\n    return colorRange[10]\n  }\n  else if (ft > 5.5 && ft < 6.0){\n    return colorRange[11]\n  }\n  else {\n    return [255,255,255,0]\n  }\n}\n\nconst waveScale = .035;\nconst frequency = 100;\n\nexport const WaveDirection = (data, currentTime) =>\n  new ArrowLayer({\n    id: \"wave_dir\",\n    data: data,\n    getWidth: 3,\n    getSourcePosition: x => {\n      return [x[0], x[1]];\n    },\n    getTargetPosition: x => {\n      if (x[2][currentTime]) {\n        var cart_theta =\n          ((90 - x[2][currentTime] + 180) * Math.PI) / 180;\n        var hs_x = x[3][currentTime] * Math.cos(cart_theta);\n        var hs_y = x[3][currentTime] * Math.sin(cart_theta);\n        return [\n          x[0] + hs_x * waveScale,\n          x[1] + hs_y * waveScale,\n          1\n        ];\n      } else {\n        return [x[0], x[1]];\n      }\n    },\n    getColor: x =>\n      x[2][currentTime] ? [255, 255, 255] : [0, 0, 0, 0],\n    parameters: {\n      depthTest: false\n    },\n    updateTriggers: {\n      getColor: currentTime,\n      getSourcePosition: currentTime,\n      getTargetPosition: currentTime\n    }\n  });\n\n\nexport const WaveLayer = (data, currentTime) => \n  new GridCellLayer({\n    id: \"wave\",\n    data: data,\n    cellSize: 110,\n    extruded: false,\n    getPosition: x => {\n      return [x[0], x[1], 0];      \n    },\n    getColor: x => {\n      if (x[3][currentTime]) {\n        var ftVal = 3.2808 * x[3][currentTime];\n        return getColorValue(ftVal, colorRange);\n      } else { \n        return [0,0,0,0]\n      }\n    },\n    parameters: {\n      depthTest: false\n    },\n    updateTriggers: {\n      getColor: currentTime\n    }\n  })\n\n","import { IconLayer, TextLayer, PolygonLayer } from 'deck.gl';\n\nconst SiteIconLayer = (zoomToSite, data) =>(\n    new IconLayer({\n      id: 'site-icon-layer',\n      data,\n      iconAtlas: '/icon-atlas.png',\n      iconMapping: {\n        marker: {\n            x: 0,\n            y: 0,\n            width: 128,\n            height: 128,\n            anchorY: 155,\n            mask: true \n        }\n      },\n      sizeScale: 15,\n      getPosition: d => [(d.NEpoint[1] + d.SWpoint[1])/2  , (d.NEpoint[0] + d.SWpoint[0])/2],\n      getIcon: d => 'marker',\n      getSize: 5,\n      getColor: [255, 255, 0],\n      onClick: d => {zoomToSite(d)},\n    })\n);\n\n\nconst NameLayer = (zoomToSite, data)=> (\n    \n    new TextLayer({\n        id: 'site-text-layer',\n        data,\n        pickable: true,\n        getPosition: d => [(d.NEpoint[1] + d.SWpoint[1])/2  , (d.NEpoint[0] + d.SWpoint[0])/2],\n        getText: d => d.siteDisplayName,\n        getSize: 32,\n        getAngle: 0,\n        getTextAnchor: 'middle',\n        getAlignmentBaseline: 'center',\n        getColor: [0,0,0],\n        onClick: d => {zoomToSite(d)},\n    })\n);\n\nconst boxlayer = (data, zoomToSite) =>\n  new PolygonLayer({\n    id: \"polygon-layer-outlines\",\n    data,\n    pickable: true,\n    stroked: true,\n    filled: true,\n    wireframe: true,\n    lineWidthMinPixels: 1,\n    getFillColor: d => [0, 0, 0,0],\n    getLineColor: [80, 80, 80],\n    getLineWidth: 1,\n    pickingRadius: 5,\n    getPolygon: x => {\n      return [\n        [x.NEpoint[1], x.NEpoint[0], 0],\n        [x.NEpoint[1], x.SWpoint[0], 0],\n        [x.SWpoint[1], x.SWpoint[0], 0],\n        [x.SWpoint[1], x.NEpoint[0], 0]\n      ];\n    },\n    onClick: d => {\n      zoomToSite(d);\n    }\n  });\n\nexport const SiteIconLayers = (onSiteClick, spatialDomainsSites) => [\n  //SiteIconLayer(onSiteClick, spatialDomainsSites),\n  boxlayer(spatialDomainsSites, onSiteClick),\n  NameLayer(onSiteClick, spatialDomainsSites)\n];\n","import {Container} from 'unstated';\nimport axios from 'axios';\nexport class ManifestService extends Container {\n\n    constructor(){\n      super()\n      this.requestData()\n    }\n\n    state = {\n      data: {},\n      spatialDomainsSites: [],\n      pointLocationsSites: [],\n      fetched: false,\n      sites: {},\n      currentSiteData: [],\n      loadingCurrentSite: false,\n    }\n\n\n    async requestData(){\n      if (!this.state.fetched){\n        //Call API\n        const response = await axios.get(\n          process.env.REACT_APP_API_URL + \"/manifest\",\n          { maxContentLength: 200000 }\n        );\n        this.setState({data: response.data})\n        this.setState({ spatialDomainsSites: response.data.SpatialDomains })\n        this.setState({ pointLocationsSites: response.data.PointLocations })\n        this.setState({fetched: true})\n      }\n    }\n\n    async requestSiteData(siteID, type){\n      this.setState({ loadingCurrentSite: true })\n      const response = await axios.get(\n        process.env.REACT_APP_API_URL + \"/getsite/\" + siteID + \"/Wave\"\n      );\n      this.setState({ currentSiteData: response.data, loadingCurrentSite: false });\n    }\n}","import React from 'react';\nimport './Graph.css'\n\nconst offset = 30;\n\nexport const Graph = ({ x, y, onMouseLeave }) => { \n  \n  return (\n    <div\n      onMouseLeave={onMouseLeave}\n      style={{ left: x - offset, top: y - offset }}\n      className=\"graph\"\n    >\n      We testing\n    </div>\n  );\n}\n\n\n","import { Container } from \"unstated\";\n\nexport class MapService extends Container {\n  state = {\n    time: 0,\n    layers: {\n      wind: false,\n      wave: true,\n      pressure: false\n    },\n    navMode: true\n  };\n  \n  toggleLayer(layer) {\n    let newState = { ...this.state.layers };\n    newState[layer] = !this.state.layers[layer];\n    console.log(newState);\n    this.setState({ layers: newState });\n  }\n\n  adjustTime(time) {\n    this.setState({ time });\n  }\n\n  toggleNavMode() {\n    this.setState({ navMode: !this.state.navMode });\n  }\n}\n","import { PolygonLayer } from \"@deck.gl/layers\";\nimport contour from \"./contour.json\";\n\n\nconst colorRange = [\n  [255 * 0.0078, 255 * 0.0745, 255 * 0.6706, 255],\n  [0,            0,            255 * 1.0000, 255],\n  [0,            255 * 0.5349, 255 * 1.0000, 255],\n  [0,            255 * 1.0000, 255 * 0.9070, 255],\n  [0,            255 * 1.0000, 255 * 0.1628, 255],\n  [255 * 1.0000, 255 * 1.0000, 0,            255],\n  [255 * 1.0000, 255 * 0.4419, 0,            255],\n  [255 * 1.0000, 0,            255 * 0.1163, 255],\n  [255 * 0.6706, 0,            0,            255],\n  [255 * 1.0000, 0,            255 * 0.8605, 255],\n  [255 * 0.5581, 0,            255 * 0.5581, 255],\n  [255 * 0.0233, 0,            255 * 0.0233, 255],\n]\n\nfunction getColorValue(ft, colorRange) {\n  if (ft >= 0 && ft < 0.5){\n    return colorRange[0]\n  }\n  else if (ft >= 0.5 && ft < 1.0){\n    return colorRange[1]\n  }\n  else if (ft >= 1.0 && ft < 1.5){\n    return colorRange[2]\n  }\n  else if (ft >= 1.5 && ft < 2.0){\n    return colorRange[3]\n  }\n  else if (ft >= 2.0 && ft < 2.5){\n    return colorRange[4]\n  }\n  else if (ft >= 2.5 && ft < 3.0){\n    return colorRange[5]\n  }\n  else if (ft >= 3.0 && ft < 3.5){\n    return colorRange[6]   \n  }\n  else if (ft >= 3.5 && ft < 4.0){\n    return colorRange[7]\n  }\n  else if (ft >= 4.0 && ft < 4.5){\n    return colorRange[8]\n  }\n  else if (ft >= 4.5 && ft < 5.0){\n    return colorRange[9]\n  }\n  else if (ft >= 5.0 && ft < 5.5){\n    return colorRange[10]\n  }\n  else if (ft >= 5.5 && ft < 6.0){\n    return colorRange[11]\n  }\n  else {\n    return [255,255,255,0]\n  }\n}\n\nexport const ContourLayer = (currentTime) => new PolygonLayer({\n  id: \"polygon-layer\",\n  data: contour[currentTime],\n  stroked: false,\n  filled: true,\n  //extruded: true,\n  wireframe: true,\n  lineWidthMinPixels: 1,\n  getPolygon: d => d.shapes,  \n  getFillColor: d => getColorValue(d.height, colorRange),\n  \n});\n","/* global window */\nimport React, { Component } from \"react\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL, { FlyToInterpolator } from \"deck.gl\";\nimport { WindLayer } from \"./Layers/WindLayer\";\nimport { WaveDirection, WaveLayer } from \"./Layers/WaveLayer\";\nimport { SiteIconLayers } from \"./Layers/SiteIconLayer\";\nimport { ObservationPointLayers } from \"./Layers/ObservationPointLayer\";\nimport { Subscribe } from \"unstated\";\nimport { ManifestService } from \"../Services/ManifestService\";\nimport { Graph } from \"../Graph/Graph\";\n//import { SwellLayer } from './Layers/SwellLayer';\nimport { MapService } from \"../Services/MapService\";\nimport { ContourLayer } from \"./Layers/CountourLayer\";\n// Set your mapbox token here\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAP_KEY; // you will need to have this defined in your env! we don't want to check the keys into our public git repo.\n\nif (!MAPBOX_TOKEN) {\n  throw new Error(\n    `Map key is undefined! Go to the google drive and read the doc under Development/Environment/`\n  );\n}\n\nclass MapComponent extends Component {\n  state = {\n    viewState: {\n      longitude: -122.504624,\n      latitude: 48.245207,\n      zoom: 10,\n      minZoom: 2,\n      maxZoom: 15,\n      pitch: 0,\n      bearing: 0\n    },\n    displayingGraph: false,\n    x: 0,\n    y: 0\n  };\n\n  displayGraph = site => {\n    this.setState({ displayingGraph: true });\n  };\n\n  onObsHover = info => {\n    if (this.state.displayGraph) {\n      return;\n    }\n    if (info.x === -1 || info.y === -1) {\n      return;\n    }\n    this.setState({ x: info.x, y: info.y });\n  };\n\n  closeGraph = () => {\n    this.setState({ displayingGraph: false });\n  };\n\n  onSiteClick = site => {\n    this.setState({\n      viewState: {\n        ...this.state.viewState,\n        longitude: site.lngLat[0],\n        latitude: site.lngLat[1],\n        zoom: 10,\n        pitch: 0,\n        bearing: 0,\n        transitionDuration: 800,\n        transitionInterpolator: new FlyToInterpolator()\n      }\n    });\n  };\n\n  onViewStateChange = ({ viewState }) => {\n    this.setState({ viewState });\n  };\n\n  getLayers = (manifest, map) => {\n    let layers = [];\n    if (map.state.navMode) {\n      layers = [\n        SiteIconLayers(site => {\n          this.onSiteClick(site);\n          map.toggleNavMode();\n          manifest.requestSiteData(site.object.id);\n        }, manifest.state.spatialDomainsSites),\n        false && ObservationPointLayers(\n          manifest.state.pointLocationsSites,\n          this.displayGraph,\n          this.onObsHover\n        )\n      ];\n    } else if (\n      !manifest.state.loadingCurrentSite &&\n      manifest.state.currentSiteData\n    ) {\n      layers = [\n        false && ObservationPointLayers(\n          manifest.state.pointLocationsSites,\n          this.displayGraph,\n          this.onObsHover\n        ),\n        //true && SwellLayer(this.props.currentTime),\n        map.state.layers.wind &&\n          false &&\n          WindLayer(map.state.time, manifest.state.currentSiteData.wind),\n        map.state.layers.wave &&\n          WaveLayer(manifest.state.currentSiteData, map.state.time),\n        map.state.layers.wave &&\n          WaveDirection(manifest.state.currentSiteData, map.state.time)\n      ];\n    }\n    return layers;\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.displayingGraph ? (\n          <Graph\n            onMouseLeave={this.closeGraph}\n            x={this.state.x}\n            y={this.state.y}\n          />\n        ) : null}\n        <DeckGL\n          layers={this.getLayers(this.props.manifest, this.props.map)}\n          initialViewState={this.state.viewState}\n          controller={true}\n          onViewStateChange={this.onViewStateChange}\n          pickingRadius={5}\n        >\n          <StaticMap\n            reuseMaps\n            mapStyle=\"mapbox://styles/mapbox/light-v9\"\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          />\n        </DeckGL>\n      </div>\n    );\n  }\n}\n\nexport const Map = () => (\n  <Subscribe to={[ManifestService, MapService]}>\n    {(manifest, map) => {\n      return <MapComponent map={map} manifest={manifest} />;\n    }}\n  </Subscribe>\n);\n","import React, { Component } from 'react';\nimport './Controls.css';\nimport InputRange from 'react-input-range';\nimport \"react-input-range/lib/css/index.css\";\nimport {Column, Row} from 'simple-flexbox';\nimport Clock from 'react-live-clock';\nimport moment from 'moment';\nimport { Subscribe} from 'unstated';\nimport { MapService } from '../Services/MapService';\n\nexport class Controls extends Component {\n\n  state = {\n    \"wind\": true,\n    \"wave\": true,\n    \"pressure\": true,\n  }\n\n  toggleLayer = (layerName) =>{\n    //fill out this function.\n    this.setState({[layerName]: !this.state[layerName] });\n\n    console.log(layerName);\n  }  \n\n  getDateLabel = (h)=>{\n    let date = new moment();\n    date.add(h, 'h');\n    return date.format('MMMM D, YYYY ha');\n  }\n\n  render() {\n    return (\n      <Subscribe to={[MapService]}>\n        {mapService => (\n          <div>\n            {mapService.state.navMode ? null :\n              <div className=\"Controls\">\n                <button\n                  className={\n                    mapService.state.layers.wind\n                      ? \"layerbtn selected\"\n                      : \"layerbtn\"\n                  }\n                  onClick={() => {\n                    mapService.toggleLayer(\"wind\");\n                  }}\n                >\n                  Wind\n              </button>\n                <button\n                  className={\n                    mapService.state.layers.pressure\n                      ? \"layerbtn selected\"\n                      : \"layerbtn\"\n                  }\n                  onClick={() => {\n                    mapService.toggleLayer(\"pressure\");\n                  }}\n                >\n                  Pressure\n              </button>\n                <button\n                  className={\n                    mapService.state.layers.wave\n                      ? \"layerbtn selected\"\n                      : \"layerbtn\"\n                  }\n                  onClick={() => {\n                    mapService.toggleLayer(\"wave\");\n                  }}\n                >\n                  Wave\n              </button>\n                <button\n                  className=\"layerbtn\"\n                  onClick={() => {\n                    mapService.toggleNavMode();\n                  }}\n                >\n                  Close\n              </button>\n                <Column horizontal=\"end\">\n                  <div className=\"disClock\">\n                    <Clock format={\"MMMM D, YYYY ha\"} ticking={true} />\n                  </div>\n                </Column>\n                <Column horizontal=\"center\">\n                  <Row horizontal=\"center\" vertical=\"center\">\n                    <div className=\"slider\">\n                      <InputRange\n                        maxValue={47}\n                        minValue={0}\n                        value={mapService.state.time}\n                        formatLabel={this.getDateLabel}\n                        onChange={value => mapService.adjustTime(value)}\n                      />\n                    </div>\n                  </Row>\n                </Column>\n              </div>\n            }\n          </div>\n        )}\n      </Subscribe>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Map } from '../../Map/Map';\nimport { Controls } from '../../Controls/Controls';\n\n\nexport class MapView extends Component{\n\n  \n  render() {\n    return (\n      <div>\n        <Map />\n        <Controls />\n      </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\n\n\n\n\n\n\nexport class AboutView extends Component {\n\n\n    render() {\n      return (\n        <div>\n          <h1>This is the about view!</h1>\n        </div>\n      );\n    }\n\n}","import React from 'react'\nimport C3Chart from 'react-c3js'\nimport Papa from 'papaparse'\n\n/* Parse CSV data and create a graph with the data */\n/* Done using C3 and D3 */\nexport default async function buildGraph() {\n\n    return new Promise((resolve, reject) => {\n        let graphs;\n        doParsePO(\"datafiles/9444900_twlpred.csv\", \"datafiles/9444900_twlobs.csv\", (allResults, status)=>{\n            graphs = doCallback(allResults, status);\n            resolve(graphs)\n        });\n    });\n\n}\n\n\n/*\n  Sequence of method executino:\n    1. doParsePO: parses both predictions and observations files\n    2. urlExists: sees if the file exists TODO: Do I need an HTTPRequest?\n    3. doCallback: asyncrhonous call back with doParsePO. Parses pred, obs\n    4. doGraphs: passes parsed info from doCallback to graph creation functions\n    5. doPGraph: creates a predictions only graph\n    6. doPOGraph: creates a predictions and observations graph\n    7. doNTRGraph: creates NTR graph from predicted data\n*/\n\nfunction doCallback(data, status) {\n    var spot = 0;\n    var i;\n\n    if (status === true) {\n\n        //get stop point between pred and obs data\n        // spot = 266, this is where the line is: \"\",\"time\",\"twl\"\n        for (i = 0; i < data.length; i++) {\n            if (data[i][3] === null || data[i][3] === undefined) {\n                spot = i;\n                break;\n            }\n        }\n    }\n    else {\n        spot = data.length;\n    }\n\n    //console.log(\"the stopping point is spot = \" + spot);\n\n    // 1. PARSE PRED DATA\n    // Every location will have pred data\n    // 1a. pred data is data[1...spot-1]\n    // 1b. obs data is data[spot+1 ... end]\n\n    var timeP     = [\"Time Predicted\"];\n    var tidePreds = [\"Predicted Tide Level\"];\n    var ntr       = [\"Non-Tidal Residual\"];\n    var twlPreds  = [\"Predicted Total Water Level\"];\n\n    var str, justdate, justtime, strT, strZ, datepart, timepart, fulldt, d;\n    strT = \"T\";\n    strZ = \"Z\";\n\n    for (i = 1; i < spot; i++) {\n\n        // FORMAT: TIME, TIDE_PRED, NTR, TWL_PRED\n        // TIME\n        if (data[i][0] === undefined) {\n            timeP.push(null);\n        }\n        else {\n            str = data[i][0];\n            justdate = str.substring(0, 10);\n            justtime = str.substring(11);\n            datepart = justdate.concat(strT);\n            timepart = justtime.concat(strZ);\n            fulldt = datepart.concat(timepart);\n            d = new Date(fulldt);\n            timeP.push(d);\n        }\n\n        // TIDE_PRED\n        if (data[i][1] === undefined) {\n            tidePreds.push(null);\n        }\n        else {\n            tidePreds.push(parseFloat(Math.round(data[i][1] * 100) / 100).toFixed(2));\n        }\n\n        // NTR\n        if (data[i][2] === undefined) {\n            ntr.push(null);\n        }\n        else {\n            ntr.push(parseFloat(Math.round(data[i][2] * 100) / 100).toFixed(2));\n        }\n\n        // TWL_PRED\n        if (data[i][3] === undefined) {\n            twlPreds.push(null);\n        }\n        else {\n            twlPreds.push(parseFloat(Math.round(data[i][3] * 100) / 100).toFixed(2));\n        }\n    }\n\n    // if status is true, both pred and obs data\n    // if status is false, only pred data\n\n    if (status === false) {\n        //alert(\"only pred file\");\n        return doGraphs(timeP, tidePreds, ntr, twlPreds, null, null);\n    }\n    else {\n        //alert(\"both pred and obs files\");\n        var timeO = [\"Time Observed\"];\n        var twlObs = [\"Observed Total Water Level\"];\n\n        // 2. PARSE OBS DATA\n        for (i = spot + 1; i < data.length; i++) {\n            if (data[i][1] === undefined) {\n                timeO.push(null);\n            }\n\n            // TIME: 2018-11-19 00:00:00\n            else {\n                str = data[i][1];\n                justdate = str.substring(0, 10);\n                justtime = str.substring(11);\n                datepart = justdate.concat(strT);\n                timepart = justtime.concat(strZ);\n                fulldt = datepart.concat(timepart);\n                d = new Date(fulldt);\n                timeO.push(d);\n            }\n\n            // TWL_OBS\n            if (data[i][2] === undefined) {\n                twlObs.push(null);\n            }\n            else {\n                twlObs.push(parseFloat(Math.round(data[i][2] * 100) / 100).toFixed(2));\n            }\n        }\n        return doGraphs(timeP, tidePreds, ntr, twlPreds, timeO, twlObs);\n    }\n}\n\nfunction doGraphs(timeP, tidePreds, ntr, twlPreds, timeO, twlObs) {\n    return (\n        <div>\n            {timeO === null && twlObs === null? doPGraph(timeP, twlPreds, tidePreds): doPOGraph(timeP, twlPreds, tidePreds, timeO, twlObs)}\n            {doNTRGraph(timeP, ntr)}\n        </div>\n    )\n    // // no obs data, just pred\n    // if (timeO === null && twlObs === null) {\n    //     doPGraph(timeP, twlPreds, tidePreds);\n    // }\n\n    // else {\n    //     doPOGraph(timeP, twlPreds, tidePreds, timeO, twlObs);\n    // }\n\n    // doNTRGraph(timeP, ntr);\n}\n\nfunction doPGraph(timeP, twlPreds, tidePreds) {\n    //alert(\"doing a graph with pred only\");\n\n    // 1. create pred/obs twl graph\n    var twlChart = {\n        size: {\n            height: 700\n        },\n\n        data: {\n\n            xs: {\n                'Predicted Total Water Level': 'Time Predicted',\n                'Predicted Tide Level': 'Time Predicted'\n            },\n            xFormat: '%Y-%m-%d %H:%M:%S',\n            columns: [\n                timeP,\n                twlPreds,\n                tidePreds\n            ]\n        },\n\n        colors: {\n            'Predicted Total Water Level': '#1f77b4',\n            'Predicted Tide Level': '#ff7f0e'\n        },\n\n        point: {\n            show: false\n        },\n\n        legend: {\n            position: 'bottom'\n        },\n\n        axis: {\n\n            x: {\n                label: {\n                    text: 'Time',\n                    position: 'outer-center'\n                },\n\n                type: 'timeseries',\n\n                tick: {\n                    format: '%Y-%m-%d %H:%M:%S',\n                    count: 5,\n                    culling: {\n                        max: 10\n                    }\n                }\n            },\n\n            y: {\n                label: {\n                    text: 'Total Water Level (TWL) [FT/MLLW]',\n                    position: 'outer-middle'\n                }\n            }\n        },\n\n        tooltip: {\n            format: {\n                title: function (d) {\n                    return d;\n                },\n\n                value: function (value, ratio, id) {\n                    if (id === 'Predicted Total Water Level' || id === 'Predicted Tide Level') {\n                        return value + ' FT/MLLW';\n                    }\n                }\n            }\n        }\n    };\n\n    return <C3Chart {...twlChart} />\n}\n\nfunction doPOGraph(timeP, twlPreds, tidePreds, timeO, twlObs) {\n    var twlChart = {\n        size: {\n            height: 700\n        },\n\n        data: {\n\n            xs: {\n                'Predicted Total Water Level': 'Time Predicted',\n                'Predicted Tide Level': 'Time Predicted',\n                'Observed Total Water Level': 'Time Observed',\n            },\n            xFormat: '%Y-%m-%d %H:%M:%S',\n            columns: [\n                timeP,\n                twlPreds,\n                tidePreds,\n                timeO,\n                twlObs\n            ]\n        },\n\n        colors: {\n            'Predicted Total Water Level': '#1f77b4',\n            'Predicted Tide Level': '#ff7f0e',\n            'Observed Total Water Level': '#2ca02c'\n        },\n\n        point: {\n            show: false\n        },\n\n        legend: {\n            position: 'bottom'\n        },\n\n        axis: {\n\n            x: {\n                label: {\n                    text: 'Time',\n                    position: 'outer-center'\n                },\n\n                type: 'timeseries',\n\n                tick: {\n                    format: '%Y-%m-%d %H:%M:%S',\n                    count: 5,\n                    culling: {\n                        max: 10\n                    }\n                }\n            },\n\n            y: {\n                label: {\n                    text: 'Total Water Level (TWL) [FT/MLLW]',\n                    position: 'outer-middle'\n                }\n            }\n        },\n\n        tooltip: {\n            format: {\n                title: function (d) {\n                    return d;\n                },\n\n                value: function (value, ratio, id) {\n                    if (id === 'Predicted Total Water Level' || id === 'Predicted Tide Level' || id === 'Observed Total Water Level') {\n                        return value + ' FT/MLLW';\n                    }\n                }\n            }\n        }\n    };\n\n    return <C3Chart {...twlChart} />\n}\n\nfunction doNTRGraph(timeP, ntr) {\n    // 2. create ntr chart\n    // Don't think we need this\n    //const ntrMin = ntr => Math.min(...ntr);\n    //const ntrMax = ntr => Math.max(...ntr);\n\n    var ntrChart = {\n\n        size: {\n            height: 700\n        },\n\n        data: {\n\n            xs: {\n                'Non-Tidal Residual': 'Time Predicted'\n            },\n\n            xFormat: '%Y-%m-%d %H:%M:%S',\n            columns: [\n                timeP,\n                ntr\n            ]\n        },\n\n        point: {\n            show: false\n        },\n\n        legend: {\n            position: 'bottom'\n        },\n\n        axis: {\n\n            x: {\n                label: {\n                    text: 'Time',\n                    position: 'outer-center'\n                },\n\n                type: 'timeseries',\n\n                tick: {\n                    format: '%Y-%m-%d %H:%M:%S',\n                    count: 5,\n                    culling: {\n                        max: 10\n                    }\n                }\n            },\n\n            y: {\n                label: {\n                    text: 'Storm Surge (Non-Tidal Residual) [FT]',\n                    position: 'outer-middle'\n                }\n            }\n        },\n        grid: {\n            y: {\n                lines: [\n                    { value: 0 }\n                ]\n            }\n        },\n        tooltip: {\n            format: {\n                title: function (d) {\n                    return d;\n                },\n\n                value: function (value, ratio, id) {\n                    if (id === 'Non-Tidal Residual') {\n                        return value + ' FT';\n                    }\n                }\n            }\n        }\n    };\n\n    return <C3Chart {...ntrChart} />;\n}\n\nfunction urlExists(url) {\n    var http = new XMLHttpRequest();\n    http.open('HEAD', url, false);\n    http.send();\n    return http.status !== 404;\n}\n\nfunction doParsePO(urlP, urlO, callBack) {\n\n    var urlsToCheck = [urlP, urlO];\n    var status = false;\n\n    urlsToCheck.forEach( url =>{\n        urlExists(url) ? status = true : status = false;\n    })\n\n    var allResults = [];\n    var tempresultsp = [];\n\n    // if status is true, both pred and obs data\n    if (status === true) {\n\n        var tempresultso = [];\n\n        Papa.parse(urlP, {\n            download: true,\n            skipEmptyLines: true,\n            complete: function (results) {\n                tempresultsp = results.data;\n\n                Papa.parse(urlO, {\n                    download: true,\n                    skipEmptyLines: true,\n                    complete: function (results) {\n                        tempresultso = results.data;\n                        allResults = tempresultsp.concat(tempresultso);\n                        callBack(allResults, status);\n                    }\n                });\n            }\n        });\n    }\n\n    // if status is false, only pred data\n    else {\n        Papa.parse(urlP, {\n            download: true,\n            skipEmptyLines: true,\n            complete: function (results) {\n                tempresultsp = results.data;\n                allResults = tempresultsp;\n                callBack(allResults, status);\n            }\n        });\n    }\n}\n","import React, {Component} from 'react'\nimport Water from './Water';\nimport 'c3/c3.css';\n\n\nexport  class WaterGraph extends Component {\n\n    state = {\n        loaded :false\n    }\n    graph;\n\n    async componentWillMount(){\n        this.graph = await Water();\n        this.setState({loaded:true});\n    }\n\n    render() {\n        return (\n            <div>\n            {this.state.loaded?this.graph:<div>Loading </div> }\n            </div>\n        );\n    }\n}\n","import React from 'react'\nimport C3Chart from 'react-c3js'\nimport Papa from 'papaparse'\n\n/* Parse CSV data and create a graph with the data */\n/* Done using C3 and D3 */\n\nvar scale = 2.237;  // 1 m/s = 2.237 mph\n\nexport default async function buildGraph() {\n  return new Promise((resolve, reject) => {\n        let graphs;\n        doParsePO(\"datafiles/9440910_wind_pred.csv\", \"datafiles/9440910_wind_obs.csv\", (allResults, status)=>{\n            graphs = doCallback(allResults, status);\n            resolve(graphs)\n        });\n    });\n}\n\n/*\n  Sequence of method executino:\n    1. doParsePO: parses both predictions and observations files\n    2. urlExists: sees if the file exists TODO: Do I need an HTTPRequest?\n    3. doCallback: asyncrhonous call back with doParsePO. Parses pred, obs\n    4. doGraphs: passes parsed info from doCallback to graph creation functions\n    5. doPGraph: creates a predictions only graph\n    6. doPOGraph: creates a predictions and observations graph\n    7. doNTRGraph: creates NTR graph from predicted data\n*/\n\nfunction doCallback(data, status){\n  var spot = 0;\n  var i;\n\n  if (status === true) {\n\n      //get stop point between pred and obs data\n      // spot = 266, this is where the line is: \"\",\"time\",\"twl\"\n      for (i = 0; i < data.length; i++) {\n        if (data[i].length === 4){\n          spot = i;\n          break;\n        }\n      }\n  }\n  else {\n    spot = data.length;\n  }\n\n  //console.log(\"the stopping point is spot = \" + spot);\n\n  // 1. PARSE PRED DATA\n  // Every location will have pred data\n    // 1a. pred data is data[1...spot-1]\n    // 1b. obs data is data[spot+1 ... end]\n\n  var timeP    =[\"Predicted Time\"];\n  var dirP     =[\"Predicted Direction\"];\n  var speedP   =[\"Predicted Speed\"];\n\n  var str, justdate, justtime, strT, strZ, datepart, timepart, fulldt, d;\n  strT = \"T\";\n  strZ = \"Z\";\n\n  for (i = 1; i < spot; i++) {\n\n    // FORMAT: TIME, DIRECTION, SPEED\n    // TIME\n    if (data[i][0] === undefined) {\n      timeP.push(null);\n    }\n    else {\n      str = data[i][0];\n      justdate = str.substring(0,10);\n      justtime = str.substring(11);\n      datepart = justdate.concat(strT);\n      timepart = justtime.concat(strZ);\n      fulldt = datepart.concat(timepart);\n      d = new Date(fulldt);\n      timeP.push(d);\n    }\n\n    // DIRECTION P\n    if(data[i][1] === undefined) {\n      dirP.push(null);\n    }\n    else {\n      dirP.push(parseFloat(Math.round(data[i][1]*100)/100).toFixed(1));\n    }\n\n    // SPEED\n    if(data[i][2] === undefined) {\n      speedP.push(null);\n    }\n    else {\n      var speedPinms = parseFloat(Math.round(data[i][2]*100)/100).toFixed(2);\n      var tempSpeedPinmph = speedPinms * scale;\n      var speedPinmph = parseFloat(Math.round(tempSpeedPinmph*100)/100).toFixed(2);\n      speedP.push(speedPinmph);\n    }\n  }\n\n  // if status is true, both pred and obs data\n  // if status is false, only pred data\n\n  if (status === false) {\n      return doGraphs(timeP, dirP, speedP, null, null, null, null);\n  }\n\n  else {\n      //alert(\"both pred and obs files\");\n      var timeO   =[\"Observed Time\"];\n      var dirO    =[\"Observed Direction\"];\n      var gusts   =[\"Gusts\"];\n      var speedO  =[\"Observed Speed\"];\n\n      // 2. PARSE OBS DATA\n      //    TIME_O, DIR_O, GUSTS, SPEED_O\n      for (i = spot+1; i < data.length; i++) {\n\n        // TIME_O\n        if (data[i][0] === undefined) {\n          timeO.push(null);\n        }\n\n        // TIME: 2019-02-13 14:54:00+00:00\n        else {\n          str = data[i][0].substring(0, 19);\n          justdate = str.substring(0,10);\n          justtime = str.substring(11);\n          datepart = justdate.concat(strT);\n          timepart = justtime.concat(strZ);\n          fulldt = datepart.concat(timepart);\n          d = new Date(fulldt);\n          timeO.push(d);\n        }\n\n        // DIR_O\n        if(data[i][1] === undefined) {\n          dirO.push(null);\n        }\n        else {\n          dirO.push(parseFloat(Math.round(data[i][1]*100)/100).toFixed(1));\n        }\n\n        // GUSTS\n        if(data[i][2] === undefined) {\n          gusts.push(null);\n        }\n        else {\n          gusts.push(parseFloat(Math.round(data[i][2]*100)/100).toFixed(2));\n        }\n\n        // SPEED_O\n        if(data[i][3] === undefined) {\n          speedO.push(null);\n        }\n        else {\n          var speedOinms = parseFloat(Math.round(data[i][3]*100)/100).toFixed(2);\n          var tempSpeedOinmph = speedOinms * scale;\n          var speedOinmph = parseFloat(Math.round(tempSpeedOinmph*100)/100).toFixed(2);\n          speedO.push(speedOinmph);\n        }\n      }\n\n       return doGraphs(timeP, dirP, speedP, timeO, dirO, gusts, speedO);\n   }\n}\n\nfunction doGraphs(timeP, dirP, speedP, timeO, dirO, gusts, speedO) {\n\n  // no obs data, just pred\n  /*\n  if (timeO === null && dirO === null && gusts === null && speedO === null) {\n    doPGraph(timeP, speedP);\n  }\n\n  else {\n    doPOGraph(timeP, speedP, timeO, gusts, speedO);\n  }\n\n  doDirectionGraph(timeP, dirP, timeO, dirO);\n  */\n\n  return(\n    <div>\n      {timeO === null && dirO === null && gusts === null && speedO === null? doPGraph(timeP, speedP) :doPOGraph(timeP, speedP, timeO, gusts, speedO)}\n      {doDirectionGraph(timeP, dirP, timeO, dirO)}\n    </div>\n  )\n\n}\n\nfunction doPGraph(timeP, dirP, speedP) {\n\n  // 1. create pred/obs speed and gusts graph\n  var speedChart = {\n\n    size: {\n      height: 700\n    },\n\n    data: {\n\n      xs: {\n        'Predicted Speed':'Predicted Time'\n      },\n      xFormat: '%Y-%m-%d %H:%M:%S',\n      columns: [\n        timeP,\n        speedP\n      ]\n    },\n\n    colors: {\n      'Predicted Speed': '#1f77b4'\n    },\n\n    point: {\n      show: false\n    },\n\n    legend: {\n      position:'bottom'\n    },\n\n    axis: {\n\n      x: {\n        label:{\n          text: 'Time',\n          position:'outer-center'\n        },\n\n        type: 'timeseries',\n\n        tick:{\n          format: '%Y-%m-%d %H:%M:%S' ,\n          count: 5,\n          culling: {\n            max: 10\n          }\n        }\n      },\n\n      y: {\n        label: {\n          text: 'Wind Speed [mph]',\n          position: 'outer-middle'\n        }\n      }\n    },\n\n    tooltip: {\n      format: {\n        title: function (d) {\n          return d;\n        },\n\n        value: function (value, ratio, id) {\n          if (id === 'Predicted Speed' ) {\n            return value + ' mph';\n          }\n        }\n      }\n    }\n  };\n\n  return <C3Chart {...speedChart} />\n\n}\n\nfunction doPOGraph(timeP, speedP, timeO, gusts, speedO) {\n  var speedChart = {\n\n    size: {\n      height: 700\n    },\n\n    data: {\n\n      xs: {\n        'Predicted Speed':'Predicted Time',\n        'Observed Speed' :'Observed Time',\n        'Gusts'          :'Observed Time',\n      },\n      xFormat: '%Y-%m-%d %H:%M:%S',\n      columns: [\n        timeP,\n        speedP,\n        timeO,\n        gusts,\n        speedO\n      ]\n    },\n\n    colors: {\n      'Predicted Speed': '#1f77b4',\n      'Observed Speed': '#ff7f0e',\n      'Gusts': '#2ca02c'\n    },\n\n    point: {\n      show: false\n    },\n\n    legend: {\n      position:'bottom'\n    },\n\n    axis: {\n\n      x: {\n        label:{\n          text: 'Time',\n          position:'outer-center'\n        },\n\n        type: 'timeseries',\n\n        tick:{\n          format: '%Y-%m-%d %H:%M:%S' ,\n          count: 5,\n          culling: {\n            max: 10\n          }\n        }\n      },\n\n      y: {\n        label: {\n          text: 'Wind Speed [mph]',\n          position: 'outer-middle'\n        }\n      }\n    },\n\n    tooltip: {\n      format: {\n        title: function (d) {\n          return d;\n        },\n\n        value: function (value, ratio, id) {\n          if (id === 'Predicted Speed' || id === 'Observed Speed' || id === 'Gusts') {\n            return value + ' mph';\n          }\n        }\n      }\n    }\n  };\n\n  return <C3Chart {...speedChart} />\n}\n\nfunction doDirectionGraph(timeP, dirP, timeO, dirO) {\n\n  // 2. create direction chart\n  var directionChart = {\n\n    size: {\n      height: 700\n    },\n\n    data: {\n\n      xs: {\n        'Predicted Direction':'Predicted Time',\n        'Observed Direction':'Observed Time',\n      },\n\n      xFormat: '%Y-%m-%d %H:%M:%S',\n      columns: [\n        timeP,\n        dirP,\n        timeO,\n        dirO\n      ]\n    },\n\n    point: {\n      show: false\n    },\n\n    legend: {\n      position:'bottom'\n    },\n\n    axis: {\n\n      x: {\n        label:{\n          text: 'Time',\n          position:'outer-center'\n        },\n\n        type: 'timeseries',\n\n        tick:{\n          format: '%Y-%m-%d %H:%M:%S' ,\n          count: 5,\n          culling: {\n            max: 10\n          }\n        }\n      },\n\n      y: {\n        label: {\n          text: 'Wind Direction [degrees]',\n          position: 'outer-middle'\n        }\n      }\n    },\n\n    tooltip: {\n      format: {\n        title: function (d) {\n          return d;\n        },\n\n        value: function (value, ratio, id) {\n          if (id === 'Predicted Direction' || id === 'Observed Direction') {\n            return value + ' degrees';\n          }\n        }\n      }\n    }\n  };\n  return <C3Chart {...directionChart}/>;\n\n}\n\nfunction urlExists(url) {\n  var http = new XMLHttpRequest();\n  http.open('HEAD', url, false);\n  http.send();\n  return http.status!==404;\n}\n\nfunction doParsePO(urlP, urlO, callBack) {\n\n  var urlsToCheck = [urlP, urlO];\n  var status = false;\n\n  urlsToCheck.forEach( url=>{\n    urlExists(url) ? status = true : status = false;\n  })\n\n  var allResults = [];\n  var tempresultsp =[];\n\n  // if status is true, both pred and obs data\n  if (status === true) {\n\n    var tempresultso = [];\n\n    Papa.parse(urlP, {\n      download: true,\n      skipEmptyLines: true,\n      complete: function(results) {\n        tempresultsp = results.data;\n\n        Papa.parse(urlO, {\n          download: true,\n          skipEmptyLines: true,\n          complete: function(results) {\n            tempresultso = results.data;\n            allResults = tempresultsp.concat(tempresultso);\n            callBack(allResults, status);\n          }\n        });\n      }\n    });\n  }\n\n  // if status is false, only pred data\n  else {\n    Papa.parse(urlP, {\n      download: true,\n      skipEmptyLines: true,\n      complete: function(results) {\n        tempresultsp = results.data;\n        allResults = tempresultsp;\n        callBack(allResults, status);\n      }\n    });\n  }\n}\n","import React, {Component} from 'react'\nimport Wind from './Wind';\nimport 'c3/c3.css';\n\n\nexport class WindGraph extends Component {\n\n    state = {\n        loaded :false\n    }\n    graph;\n\n    async componentWillMount(){\n        this.graph = await Wind();\n        this.setState({loaded:true});\n    }\n\n    render() {\n        return (\n            <div>\n            {this.state.loaded?this.graph:<div>Loading </div> }\n            </div>\n        );\n    }\n}\n","import React from \"react\"\nimport {withRouter, NavLink } from \"react-router-dom\";\nimport \"./Navagation.css\"\n\nexport class NavagationComponet  extends React.Component { \n  \n  \n  render(){\n    return (\n      <nav className=\"Nav\">\n        <ul>\n          <li>\n            <NavLink activeClassName=\"activeRoute\" exact to=\"/\">Map</NavLink>\n          </li>\n          {/* <li>\n            <Link to=\"/about\">About</Link>\n          </li> */}\n          <li>\n            <NavLink activeClassName=\"activeRoute\" exact to=\"/WaterGraph\">Water Graph</NavLink>\n          </li>\n          <li>\n            <NavLink activeClassName=\"activeRoute\"  to=\"/WindGraph\">Wind Graph</NavLink>\n          </li>\n        </ul>\n      </nav>\n    )\n  }\n}\n\nexport const Navagation = withRouter(props => <NavagationComponet {...props}/>);","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport { MapView, AboutView } from '../Views';\nimport {WaterGraph} from '../Graph/WaterGraph';\nimport {WindGraph} from '../Graph/WindGraph';\nimport { Navagation } from './Navagation';\n\nexport const AppRouter = () => (\n  <Router>\n    <div>\n      <Navagation />\n      <Route path=\"/\" exact component={MapView} />\n      <Route path=\"/about\" exact component={AboutView} />\n      <Route path=\"/WaterGraph\" exact component={WaterGraph} />\n      <Route path=\"/WindGraph\" exact component={WindGraph} />\n    </div>\n  </Router>\n);\n","/* global window */\nimport React, { Component } from 'react';\nimport { AppRouter } from './Router/Router';\nimport {Provider} from 'unstated';\nimport { ManifestService } from './Services/ManifestService';\nimport { MapService } from './Services/MapService';\n\nlet manifest = new ManifestService();\nlet mapService = new MapService();\nexport class App extends Component {\n\n  render() {\n    return (\n      <Provider  inject={[manifest, mapService]}>\n        <AppRouter />\n      </Provider>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n  App\n} from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(< App> </ App>, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}